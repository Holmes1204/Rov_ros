// Generated by gencpp from file topic_example/img_fb.msg
// DO NOT EDIT!


#ifndef TOPIC_EXAMPLE_MESSAGE_IMG_FB_H
#define TOPIC_EXAMPLE_MESSAGE_IMG_FB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace topic_example
{
template <class ContainerAllocator>
struct img_fb_
{
  typedef img_fb_<ContainerAllocator> Type;

  img_fb_()
    : angle_fb(0.0)
    , dist_fb(0.0)  {
    }
  img_fb_(const ContainerAllocator& _alloc)
    : angle_fb(0.0)
    , dist_fb(0.0)  {
  (void)_alloc;
    }



   typedef double _angle_fb_type;
  _angle_fb_type angle_fb;

   typedef double _dist_fb_type;
  _dist_fb_type dist_fb;





  typedef boost::shared_ptr< ::topic_example::img_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topic_example::img_fb_<ContainerAllocator> const> ConstPtr;

}; // struct img_fb_

typedef ::topic_example::img_fb_<std::allocator<void> > img_fb;

typedef boost::shared_ptr< ::topic_example::img_fb > img_fbPtr;
typedef boost::shared_ptr< ::topic_example::img_fb const> img_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topic_example::img_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topic_example::img_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::topic_example::img_fb_<ContainerAllocator1> & lhs, const ::topic_example::img_fb_<ContainerAllocator2> & rhs)
{
  return lhs.angle_fb == rhs.angle_fb &&
    lhs.dist_fb == rhs.dist_fb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::topic_example::img_fb_<ContainerAllocator1> & lhs, const ::topic_example::img_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace topic_example

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::topic_example::img_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topic_example::img_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topic_example::img_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topic_example::img_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topic_example::img_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topic_example::img_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topic_example::img_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32196808a91024a033d12fa41fb8c427";
  }

  static const char* value(const ::topic_example::img_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32196808a91024a0ULL;
  static const uint64_t static_value2 = 0x33d12fa41fb8c427ULL;
};

template<class ContainerAllocator>
struct DataType< ::topic_example::img_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topic_example/img_fb";
  }

  static const char* value(const ::topic_example::img_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topic_example::img_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angle_fb\n"
"float64 dist_fb\n"
;
  }

  static const char* value(const ::topic_example::img_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topic_example::img_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_fb);
      stream.next(m.dist_fb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct img_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topic_example::img_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topic_example::img_fb_<ContainerAllocator>& v)
  {
    s << indent << "angle_fb: ";
    Printer<double>::stream(s, indent + "  ", v.angle_fb);
    s << indent << "dist_fb: ";
    Printer<double>::stream(s, indent + "  ", v.dist_fb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPIC_EXAMPLE_MESSAGE_IMG_FB_H
